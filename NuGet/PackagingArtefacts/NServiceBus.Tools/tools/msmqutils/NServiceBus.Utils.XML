<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NServiceBus.Utils</name>
    </assembly>
    <members>
        <member name="T:NServiceBus.Utils.DtcUtil">
            <summary>
            Utility class for working with DTC.
            </summary>
        </member>
        <member name="M:NServiceBus.Utils.DtcUtil.StartDtcIfNecessary">
            <summary>
            Checks that the MSDTC service is running and configured correctly, and if not
            takes the necessary corrective actions to make it so.
            </summary>
        </member>
        <member name="T:NServiceBus.Utils.MsmqInstallation">
            <summary>
            Utility class for starting and installing MSMQ.
            </summary>
        </member>
        <member name="M:NServiceBus.Utils.MsmqInstallation.StartMsmqIfNecessary">
            <summary>
            Checks that MSMQ is installed, configured correctly, and started, and if not
            takes the necessary corrective actions to make it so.
            </summary>
        </member>
        <member name="M:NServiceBus.Utils.MsmqInstallation.IsInstallationGood">
            <summary>
            Determines if the msmq installation on the current machine is ok
            </summary>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.Utils.MsmqInstallation.LoadLibraryW(System.String)">
             Return Type: HMODULE->HINSTANCE->HINSTANCE__*
            lpLibFileName: LPCWSTR->WCHAR*
        </member>
        <member name="T:NServiceBus.Utils.MsmqUtilities">
            <summary>
             MSMQ-related utility functions
            </summary>
        </member>
        <member name="M:NServiceBus.Utils.MsmqUtilities.CreateQueueIfNecessary(System.String,System.String)">
            <summary>
             Utility method for creating a queue if it does not exist.
            </summary>
            <param name="queueName"></param>
            <param name="account">The account to be given permissions to the queue</param>
        </member>
        <member name="M:NServiceBus.Utils.MsmqUtilities.CreateQueue(System.String,System.String)">
            <summary>
             Create named message queue
            </summary>
            <param name="queueName"></param>
            <param name="account">The account to be given permissions to the queue</param>
        </member>
        <member name="M:NServiceBus.Utils.MsmqUtilities.SetPermissionsForQueue(System.String,System.String)">
            <summary>
            Sets default permissions for queue.
            </summary>
            <param name="queue"></param>
            <param name="account"></param>
        </member>
        <member name="M:NServiceBus.Utils.MsmqUtilities.GetFullPath(System.String)">
            <summary>
            Turns a '@' separated value into a full path.
            Format is 'queue@machine', or 'queue@ipaddress'
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.Utils.MsmqUtilities.GetReturnAddress(System.String,System.String)">
            <summary>
            Gets the name of the return address from the provided value.
            If the target includes a machine name, uses the local machine name in the returned value
            otherwise uses the local IP address in the returned value.
            </summary>
            <param name="value"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.Utils.MsmqUtilities.GetFullPathWithoutPrefix(System.String)">
            <summary>
            Returns the full path without Format or direct os
            from a '@' separated path.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.Utils.MsmqUtilities.GetMachineNameFromLogicalName(System.String)">
            <summary>
            Returns the machine name from a '@' separated full logical name,
            or the Environment.MachineName otherwise.
            </summary>
            <param name="logicalName"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.Utils.MsmqUtilities.GetQueueNameFromLogicalName(System.String)">
            <summary>
            Returns the queue name from a '@' separated full logical name.
            </summary>
            <param name="logicalName"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.Utils.MsmqUtilities.QueueIsLocal(System.String)">
            <summary>
            Checks whether or not a queue is local by its path.
            </summary>
            <param name="value">The path to the queue to check.</param>
            <returns>true if the queue is local, otherwise false.</returns>
        </member>
        <member name="M:NServiceBus.Utils.MsmqUtilities.GetIndependentAddressForQueue(System.Messaging.MessageQueue)">
            <summary>
            Gets an independent address for the queue in the form:
            queue@machine.
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.Utils.MsmqUtilities.GetNumberOfPendingMessages(System.String)">
            <summary>
            Returns the number of messages in the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NServiceBus.Utils.PerformanceCounterInstallation">
            <summary>
            Performs installation of nessesary categories and conters for NServiceBus
            </summary>
        </member>
        <member name="M:NServiceBus.Utils.PerformanceCounterInstallation.InstallCounters">
            <summary>
            Starts the install
            </summary>
        </member>
        <member name="T:NServiceBus.Utils.ProcessUtil">
            <summary>
            Utility class for changing a windows service's status.
            </summary>
        </member>
        <member name="M:NServiceBus.Utils.ProcessUtil.ChangeServiceStatus(System.ServiceProcess.ServiceController,System.ServiceProcess.ServiceControllerStatus,System.Action)">
            <summary>
            Checks the status of the given controller, and if it isn't the requested state,
            performs the given action, and checks the state again.
            </summary>
            <param name="controller"></param>
            <param name="status"></param>
            <param name="changeStatus"></param>
        </member>
        <member name="T:NServiceBus.Utils.TransactionWrapper">
            <summary>
            Provides functionality for executing a callback in a transaction.
            </summary>
        </member>
        <member name="M:NServiceBus.Utils.TransactionWrapper.RunInTransaction(System.Action)">
            <summary>
            Executes the provided delegate method in a transaction.
            </summary>
            <param name="callback">The method to call.</param>
        </member>
        <member name="M:NServiceBus.Utils.TransactionWrapper.RunInTransaction(System.Action,System.Transactions.IsolationLevel,System.TimeSpan)">
            <summary>
            Executes the provided delegate method in a transaction.
            </summary>
            <param name="callback">The delegate method to call.</param>
            <param name="isolationLevel">The isolation level of the transaction.</param>
            <param name="transactionTimeout">The timeout period of the transaction.</param>
        </member>
        <member name="T:NServiceBus.Utils.WorkerThread">
            <summary>
            Represents a worker thread that will repeatedly execute a callback.
            </summary>
        </member>
        <member name="M:NServiceBus.Utils.WorkerThread.#ctor(System.Action)">
            <summary>
            Initializes a new WorkerThread for the specified method to run.
            </summary>
            <param name="methodToRunInLoop">The delegate method to execute in a loop.</param>
        </member>
        <member name="M:NServiceBus.Utils.WorkerThread.Start">
            <summary>
            Starts the worker thread.
            </summary>
        </member>
        <member name="M:NServiceBus.Utils.WorkerThread.Stop">
            <summary>
            Stops the worker thread.
            </summary>
        </member>
        <member name="M:NServiceBus.Utils.WorkerThread.Loop">
            <summary>
            Executes the delegate method until the <see cref="M:NServiceBus.Utils.WorkerThread.Stop"/>
            method is called.
            </summary>
        </member>
        <member name="E:NServiceBus.Utils.WorkerThread.Stopped">
            <summary>
            Event raised when the worker thread has stopped.
            </summary>
        </member>
        <member name="P:NServiceBus.Utils.WorkerThread.StopRequested">
            <summary>
            Gets whether or not a stop request has been received.
            </summary>
        </member>
    </members>
</doc>
