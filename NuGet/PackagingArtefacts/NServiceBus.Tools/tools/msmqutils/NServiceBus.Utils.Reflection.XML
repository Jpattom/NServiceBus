<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NServiceBus.Utils.Reflection</name>
    </assembly>
    <members>
        <member name="T:NServiceBus.Utils.Reflection.ExtensionMethods">
            <summary>
            Contains extension methods
            </summary>
        </member>
        <member name="M:NServiceBus.Utils.Reflection.ExtensionMethods.IsGenericallyEquivalent(System.Type,System.Type,System.Type)">
            <summary>
            Useful for finding if a type is (for example) IMessageHandler{T} where T : IMessage.
            </summary>
            <param name="type"></param>
            <param name="openGenericType"></param>
            <param name="genericArg"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.Utils.Reflection.ExtensionMethods.GetGenericallyContainedType(System.Type,System.Type,System.Type)">
            <summary>
            Returns the enclosed generic type given that the type is GenericallyEquivalent.
            </summary>
            <param name="type"></param>
            <param name="openGenericType"></param>
            <param name="genericArg"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.Utils.Reflection.ExtensionMethods.IsSimpleType(System.Type)">
            <summary>
            Returns true if the type can be serialized as is.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.Utils.Reflection.ExtensionMethods.SerializationFriendlyName(System.Type)">
            <summary>
            Takes the name of the given type and makes it friendly for serialization
            by removing problematic characters.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:NServiceBus.Utils.Reflection.Reflect">
            <summary>
            Provides strong-typed reflection for static members of any type or calling 
            object constructors (to retrieve the constructor <see cref="T:System.Reflection.MethodInfo"/>).
            </summary>
        </member>
        <member name="M:NServiceBus.Utils.Reflection.Reflect.#ctor">
            <summary>
            Initializes the reflector class.
            </summary>
        </member>
        <member name="M:NServiceBus.Utils.Reflection.Reflect.GetConstructor(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Gets the constructor represented in the lambda expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="constructor"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="constructor"/> is not a lambda expression or it does not represent a constructor invocation.</exception>
        </member>
        <member name="M:NServiceBus.Utils.Reflection.Reflect.GetMethod(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Gets the method represented by the lambda expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a method invocation.</exception>
        </member>
        <member name="M:NServiceBus.Utils.Reflection.Reflect.GetProperty(System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            Gets the property represented by the lambda expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="property"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="property"/> is not a lambda expression or it does not represent a property access.</exception>
        </member>
        <member name="M:NServiceBus.Utils.Reflection.Reflect.GetField(System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            Gets the field represented by the lambda expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="field"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="field"/> is not a lambda expression or it does not represent a field access.</exception>
        </member>
        <member name="M:NServiceBus.Utils.Reflection.Reflect.GetMethodInfo(System.Linq.Expressions.Expression)">
            <summary>
            Returns a MethodInfo for an expression containing a call to a method.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.Utils.Reflection.Reflect.GetMemberInfo(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Returns a MemberInfo for an expression containing a call to a property.
            </summary>
            <param name="member"></param>
            <param name="checkForSingleDot">Checks that the member expression doesn't have more than one dot like a.Prop.Val</param>
            <returns></returns>
        </member>
        <member name="T:NServiceBus.Utils.Reflection.Reflect`1">
            <summary>
            Provides strong-typed reflection of the <typeparamref name="TTarget"/> 
            type.
            </summary>
            <typeparam name="TTarget">Type to reflect.</typeparam>
        </member>
        <member name="M:NServiceBus.Utils.Reflection.Reflect`1.GetMethod(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Gets the method represented by the lambda expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a method invocation.</exception>
        </member>
        <member name="M:NServiceBus.Utils.Reflection.Reflect`1.GetMethod``1(System.Linq.Expressions.Expression{System.Action{`0,``0}})">
            <summary>
            Gets the method represented by the lambda expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a method invocation.</exception>
        </member>
        <member name="M:NServiceBus.Utils.Reflection.Reflect`1.GetMethod``2(System.Linq.Expressions.Expression{System.Action{`0,``0,``1}})">
            <summary>
            Gets the method represented by the lambda expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a method invocation.</exception>
        </member>
        <member name="M:NServiceBus.Utils.Reflection.Reflect`1.GetMethod``3(System.Linq.Expressions.Expression{System.Action{`0,``0,``1,``2}})">
            <summary>
            Gets the method represented by the lambda expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a method invocation.</exception>
        </member>
        <member name="M:NServiceBus.Utils.Reflection.Reflect`1.GetProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the property represented by the lambda expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="property"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="property"/> is not a lambda expression or it does not represent a property access.</exception>
        </member>
        <member name="M:NServiceBus.Utils.Reflection.Reflect`1.GetProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
            <summary>
            Gets the property represented by the lambda expression.
            If <see cref="!:checkForSingleDot"/> is true, then the property expression is checked to see that
            only a single dot is present.
            </summary>
            <param name="property"></param>
            <param name="checkForSingleDot"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.Utils.Reflection.Reflect`1.GetField(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the field represented by the lambda expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="field"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="field"/> is not a lambda expression or it does not represent a field access.</exception>
        </member>
    </members>
</doc>
